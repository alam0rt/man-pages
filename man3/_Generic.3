.\" Copyright (C) 2022 Alejandro Colomar <alx@kernel.org>
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.TH _Generic 3 (date) "Linux man-pages (unreleased)"
.SH NAME
_Generic \- type-generic selection
.SH SYNOPSIS
.nf
.BR _Generic( \fIexpression\fP ", type1: " e1 ", " "... /*" \
", default: " "e */" );
.fi
.SH DESCRIPTION
.BR _Generic ()
evaluates the path of code under the type selector
that is compatible with the type of the controlling
.IR expression ,
or
.B default:
if no type is compatible.
.PP
.I expression
is not evaluated.
.PP
This is especially useful for writing type-generic macros,
that will behave differently depending on the type of the argument.
.SH STANDARDS
C11 and later.
.SH EXAMPLES
The following code demonstrates how to write
a macro similar to C++'s
.BR \%static_cast (),
which will allow casting safely between a limited set of types.
It is useful for example when calling
system calls or library functions that use compatible structures,
like for example
.BR bind (2)
with
.BR \%sockaddr (3type).
.IP
.EX
/* This code is in the public domain. */

#include <netinet/in.h>
#include <sys/socket.h>
#include <sys/un.h>

#define sockaddr_cast(t, p)                            \e
    _Generic(&*(p),                                    \e
    struct sockaddr *:                                 \e
        _Generic((typeof_unqual(t)) NULL,              \e
        struct sockaddr_in *:             (t) (p),     \e
        struct sockaddr_in6 *:            (t) (p),     \e
        struct sockaddr_un *:             (t) (p),     \e
        default:                              (p)),    \e
    struct sockaddr **:                                \e
        _Generic((typeof_unqual(t)) NULL,              \e
        struct sockaddr_in **:            (t) (p),     \e
        struct sockaddr_in6 **:           (t) (p),     \e
        struct sockaddr_un **:            (t) (p),     \e
        default:                              (p)),    \e
    const struct sockaddr *:                           \e
        _Generic((t) NULL,                             \e
        const struct sockaddr_in *:       (t) (p),     \e
        const struct sockaddr_in6 *:      (t) (p),     \e
        const struct sockaddr_un *:       (t) (p),     \e
        default:                              (p)),    \e
                                                       \e
    struct sockaddr_in *:                              \e
        _Generic((typeof_unqual(t)) NULL,              \e
        struct sockaddr *:                (t) (p),     \e
        default:                              (p)),    \e
    struct sockaddr_in **:                             \e
        _Generic((typeof_unqual(t)) NULL,              \e
        struct sockaddr **:               (t) (p),     \e
        default:                              (p)),    \e
    const struct sockaddr_in *:                        \e
        _Generic((t) NULL,                             \e
        const struct sockaddr *:          (t) (p),     \e
        default:                              (p)),    \e
                                                       \e
    struct sockaddr_in6 *:                             \e
        _Generic((typeof_unqual(t)) NULL,              \e
        struct sockaddr *:                (t) (p),     \e
        default:                              (p)),    \e
    struct sockaddr_in6 **:                            \e
        _Generic((typeof_unqual(t)) NULL,              \e
        struct sockaddr **:               (t) (p),     \e
        default:                              (p)),    \e
    const struct sockaddr_in6 *:                       \e
        _Generic((t) NULL,                             \e
        const struct sockaddr *:          (t) (p),     \e
        default:                              (p)),    \e
                                                       \e
    struct sockaddr_un *:                              \e
        _Generic((typeof_unqual(t)) NULL,              \e
        struct sockaddr *:                (t) (p),     \e
        default:                              (p)),    \e
    struct sockaddr_un **:                             \e
        _Generic((typeof_unqual(t)) NULL,              \e
        struct sockaddr **:               (t) (p),     \e
        default:                              (p)),    \e
    const struct sockaddr_un *:                        \e
        _Generic((t) NULL,                             \e
        const struct sockaddr *:          (t) (p),     \e
        default:                              (p)),    \e
                                                       \e
    default:                                           \e
        (p)                                            \e
    )

socklen_t           slen;
struct sockaddr_un  sun;

slen = sizeof(ss);
getsockname(sfd, sockaddr_cast(struct sockaddr *, &sun), &slen);
.EE
.PP
The following program demonstrates how to write
a replacement for the standard
.BR imaxabs (3)
function, which being a function can't really provide what it promises:
seamlessly upgrading to the widest available type.
.IP
.\" SRC BEGIN (_Generic.c)
.EX
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#define my_imaxabs  _Generic(INTMAX_C(0),  \e
    long:           labs,                  \e
    long long:      llabs                  \e
 /* long long long: lllabs */              \e
)

int
main(void)
{
    off_t  a;

    a = \-42;
    printf("imaxabs(%jd) == %jd\en", (intmax_t) a, my_imaxabs(a));
    printf("&imaxabs == %p\en", &my_imaxabs);
    printf("&labs    == %p\en", &labs);
    printf("&llabs   == %p\en", &llabs);

    exit(EXIT_SUCCESS);
}
.EE
.\" SRC END
