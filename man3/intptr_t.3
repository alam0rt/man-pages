.\" Copyright (c) 2020-2022 by Alejandro Colomar <colomar.6.4.3@gmail.com>
.\" and Copyright (c) 2020 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"
.TH INTPTR_T 3 2022-02-25 Linux "Linux Programmer's Manual"
.SH NAME
intptr_t, uintptr_t \- integer types wide enough to hold pointers
.SH SYNOPSIS
.nf
.B #include <stdint.h>
.PP
.BR typedef " /* ... */ " intptr_t;
.BR typedef " /* ... */ " uintptr_t;
.PP
.BR "#define INTPTR_WIDTH" "  /* ... */"
.B #define UINTPTR_WIDTH INTPTR_WIDTH
.PP
.BR "#define INTPTR_MAX" "    /*  2**(INTPTR_WIDTH \- 1) \- 1  */"
.BR "#define INTPTR_MIN" "    /*  \- 2**(INTPTR_WIDTH \- 1)    */"
.BR "#define UINTPTR_MAX" "   /*  2**UINTPTR_WIDTH \- 1       */"
.fi
.SH DESCRIPTION
.I intptr_t
is a signed integer type
such that any valid
.RI ( "void *" )
value can be converted to this type and then converted back.
According to the C language standard, it shall be
capable of storing values in the range
.RB [ INTPTR_MIN ,
.BR INTPTR_MAX ].
.PP
.I uintptr_t
is an unsigned integer type
such that any valid
.RI ( "void *" )
value can be converted to this type and then converted back.
According to the C language standard, it shall be
capable of storing values in the range
.RB [ 0 ,
.BR INTPTR_MAX ].
.PP
The macros
.RB [ U ] INTPTR_WIDTH
expand to the width in bits of these types.
.PP
The macros
.RB [ U ] INTPTR_MAX
expand to the maximum value that these types can hold.
.PP
The macro
.B INTPTR_MIN
expands to the minimum value that
.I intptr_t
can hold.
.PP
The length modifiers for the
.RI [ u ] intptr_t
types
for the
.BR printf (3)
family of functions
are expanded by the macros
.BR PRIdPTR ,
.BR PRIiPTR ,
and
.B PRIuPTR
(defined in
.IR <inttypes.h> );
resulting commonly in
.B %"PRIdPTR"
or
.B %"PRIiPTR"
for printing
.I intptr_t
values.
The length modifiers for the
.IR [ u ] intptr_t
types
for the
.BR scanf (3)
family of functions
are expanded by the macros
.BR SCNdPTR ,
.BR SCNiPTR ,
and
.B SCNuPTR
(defined in
.IR <inttypes.h> );
resulting commonly in
.B %"SCNuPTR"
for scanning
.I uintptr_t
values.
.SH CONFORMING TO
C99 and later; POSIX.1-2001 and later.
.SH NOTES
The following header also provides these types:
.IR <inttypes.h> .
.SH SEE ALSO
.BR intmax_t (3),
.BR void (3)
