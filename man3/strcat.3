'\" t
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:11:47 1993 by Rik Faith (faith@cs.unc.edu)
.\" 2007-06-15, Marc Boyer <marc.boyer@enseeiht.fr> + mtk
.\"     Improve discussion of strncat().
.TH strcat 3 (date) "Linux man-pages (unreleased)"
.SH NAME
strcat \- concatenate two strings
.SH LIBRARY
Standard C library
.RI ( libc ", " \-lc )
.SH SYNOPSIS
.nf
.B #include <string.h>
.PP
.BI "char *strcat(char *restrict " dest ", const char *restrict " src );
.fi
.SH DESCRIPTION
The
.BR strcat ()
function appends the
.I src
string to the
.I dest
string,
overwriting the terminating null byte (\(aq\e0\(aq) at the end of
.IR dest ,
and then adds a terminating null byte.
The strings may not overlap, and the
.I dest
string must have
enough space for the result.
If
.I dest
is not large enough, program behavior is unpredictable;
.IR "buffer overruns are a favorite avenue for attacking secure programs" .
.SH RETURN VALUE
The
.BR strcat ()
function returns a pointer to the resulting string
.IR dest .
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.ad l
.nh
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
.BR strcat (),
.BR strncat ()
T}	Thread safety	MT-Safe
.TE
.hy
.ad
.sp 1
.SH STANDARDS
POSIX.1-2001, POSIX.1-2008, C89, C99, SVr4, 4.3BSD.
.SH NOTES
Some systems (the BSDs, Solaris, and others) provide the following function:
.PP
.in +4n
.EX
size_t strlcat(char *dest, const char *src, size_t size);
.EE
.in
.PP
This function appends the null-terminated string
.I src
to the string
.IR dest ,
copying at most
.I size\-strlen(dest)\-1
from
.IR src ,
and adds a terminating null byte to the result,
.I unless
.I size
is less than
.IR strlen(dest) .
This function fixes the buffer overrun problem of
.BR strcat (),
but the caller must still handle the possibility of data loss if
.I size
is too small.
The function returns the length of the string
.BR strlcat ()
tried to create; if the return value is greater than or equal to
.IR size ,
data loss occurred.
If data loss matters, the caller
.I must
either check the arguments before the call, or test the function return value.
.BR strlcat ()
is not present in glibc and is not standardized by POSIX,
.\" https://lwn.net/Articles/506530/
but is available on Linux via the
.I libbsd
library.
.\"
.SH EXAMPLES
Because
.BR strcat ()
must find the null byte that terminates the string
.I dest
using a search that starts at the beginning of the string,
the execution time of this function
scales according to the length of the string
.IR dest .
This can be demonstrated by running the program below.
(If the goal is to concatenate many strings to one target,
then manually copying the bytes from each source string
while maintaining a pointer to the end of the target string
will provide better performance.)
.\"
.SS Program source
\&
.\" SRC BEGIN (strcat.c)
.EX
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <time.h>

int
main(void)
{
#define LIM 4000000
    char p[LIM + 1];    /* +1 for terminating null byte */
    time_t base;

    base = time(NULL);
    p[0] = \(aq\e0\(aq;

    for (unsigned int j = 0; j < LIM; j++) {
        if ((j % 10000) == 0)
            printf("%u %jd\en", j, (intmax_t) (time(NULL) \- base));
        strcat(p, "a");
    }
}
.EE
.\" SRC END
.SH SEE ALSO
.BR bcopy (3),
.BR memccpy (3),
.BR memcpy (3),
.BR strcpy (3),
.BR string (3),
.BR strlcat (3bsd),
.BR wcscat (3),
.BR wcsncat (3)
