'\" t
.\" Copyright 2002, Walter Harms <walter.harms@informatik.uni-oldenburg.de>
.\" Copyright 2002, Andries Brouwer <aeb@cwi.nl>
.\" Copyright 2024, Alejandro Colomar <alx@kernel.org>
.\"
.\" SPDX-License-Identifier: GPL-1.0-or-later
.\"
.TH ioctl_tty 2 (date) "Linux man-pages (unreleased)"
.SH NAME
ioctl_tty \- ioctls for terminals and serial lines
.SH LIBRARY
Standard C library
.RI ( libc ", " \-lc )
.SH SYNOPSIS
.nf
.BR "#include <asm/termbits.h>" "  /* Definition of constants */"
.B #include <sys/ioctl.h>
.P
.BI "int ioctl(int " fd ", int " op ", ...);"
.P
.B #include <linux/serial.h>
.P
.B struct serial_icounter_struct;
.fi
.SH DESCRIPTION
The
.BR ioctl (2)
call for terminals and serial ports accepts many possible operation arguments.
Most require a third argument, of varying type, here called
.I argp
or
.IR arg .
.P
Use of
.BR ioctl ()
makes for nonportable programs.
Use the POSIX interface described in
.BR termios (3)
whenever possible.
.SS Get and set terminal attributes
.TP
.B TCGETS
.TQ
.B TCSETS
.TQ
.B TCSETSW
.TQ
.B TCSETSF
.TP
.B TCGETS
.TQ
.B TCSETS
.TQ
.B TCSETSW
.TQ
.B TCSETSF
.TP
.B TCGETS
.TQ
.B TCSETS
.TQ
.B TCSETSW
.TQ
.B TCSETSF
.SS Locking the termios structure
.TP
.B TIOCGLCKTRMIOS
.TQ
.B TIOCSLCKTRMIOS
.SS Get and set window size
.TP
.B TIOCGWINSZ
.TQ
.B TIOCSWINSZ
.SS Sending a break
.TP
.B TCSBRK
.TQ
.B TCSBRKP
.TQ
.B TIOCSBRK
.TQ
.B TIOCCBRK
.SS Software flow control
.TP
.B TCXONC
.SS Buffer count and flushing
.TP
.B FIONREAD
.TQ
.B TIOCINQ
.TQ
.B TIOCOUTQ
.TQ
.B TCFLSH
.TQ
.B TIOCSERGETLSR
.SS Faking input
.TP
.B TIOCSTI
.SS Redirecting console output
.TP
.B TIOCCONS
.SS Controlling terminal
.TP
.B TIOCSCTTY
.TQ
.B TIOCNOTTY
.SS Process group and session ID
.TP
.B TIOCGPGRP
.TQ
.B TIOCSPGRP
.TQ
.B TIOCGSID
.SS Exclusive mode
.TP
.B TIOCEXCL
.TQ
.B TIOCGEXCL
.TQ
.B TIOCNXCL
.SS Line discipline
.TP
.B TIOCGETD
.TQ
.B TIOCSETD
.SS Pseudoterminal ioctls
.TP
.B TIOCPKT
.TQ
.B TIOCGPKT
.TP
.B TIOCSPTLCK
.TQ
.B TIOCGPTLCK
.TP
.B TIOCGPTPEER
.SS Modem control
.TP
.B TIOCMGET
Argument:
.BI "int\~*" argp
.IP
Get the status of modem bits.
.TP
.B TIOCMSET
Argument:
.BI "const int\~*" argp
.IP
Set the status of modem bits.
.TP
.B TIOCMBIC
Argument:
.BI "const int\~*" argp
.IP
Clear the indicated modem bits.
.TP
.B TIOCMBIS
Argument:
.BI "const int\~*" argp
.IP
Set the indicated modem bits.
.P
The following bits are used by the above ioctls:
.P
.TS
lb l.
TIOCM_LE	DSR (data set ready/line enable)
TIOCM_DTR	DTR (data terminal ready)
TIOCM_RTS	RTS (request to send)
TIOCM_ST	Secondary TXD (transmit)
TIOCM_SR	Secondary RXD (receive)
TIOCM_CTS	CTS (clear to send)
TIOCM_CAR	DCD (data carrier detect)
TIOCM_CD	see TIOCM_CAR
TIOCM_RNG	RNG (ring)
TIOCM_RI	see TIOCM_RNG
TIOCM_DSR	DSR (data set ready)
.TE
.TP
.B TIOCMIWAIT
Argument:
.BI "int " arg
.IP
Wait for any of the 4 modem bits (DCD, RI, DSR, CTS) to change.
The bits of interest are specified as a bit mask in
.IR arg ,
by ORing together any of the bit values,
.BR TIOCM_RNG ,
.BR TIOCM_DSR ,
.BR TIOCM_CD ,
and
.BR TIOCM_CTS .
The caller should use
.B TIOCGICOUNT
to see which bit has changed.
.TP
.B TIOCGICOUNT
Argument:
.BI "struct serial_icounter_struct\~*" argp
.IP
Get counts of input serial line interrupts (DCD, RI, DSR, CTS).
The counts are written to the
.I serial_icounter_struct
structure pointed to by
.IR argp .
.IP
Note: both 1->0 and 0->1 transitions are counted, except for
RI, where only 0->1 transitions are counted.
.SS Marking a line as local
.TP
.B TIOCGSOFTCAR
Argument:
.BI "int\~*" argp
.IP
("Get software carrier flag")
Get the status of the CLOCAL flag in the c_cflag field of the
.I termios
structure.
.TP
.B TIOCSSOFTCAR
Argument:
.BI "const int\~*" argp
.IP
("Set software carrier flag")
Set the CLOCAL flag in the
.I termios
structure when
.RI * argp
is nonzero, and clear it otherwise.
.P
If the
.B CLOCAL
flag for a line is off, the hardware carrier detect (DCD)
signal is significant, and an
.BR open (2)
of the corresponding terminal will block until DCD is asserted,
unless the
.B O_NONBLOCK
flag is given.
If
.B CLOCAL
is set, the line behaves as if DCD is always asserted.
The software carrier flag is usually turned on for local devices,
and is off for lines with modems.
.SS Linux-specific
For the
.B TIOCLINUX
ioctl, see
.BR ioctl_console (2).
.SS Kernel debugging
.B "#include <linux/tty.h>"
.TP
.B TIOCTTYGSTRUCT
Argument:
.BI "struct tty_struct\~*" argp
.IP
Get the
.I tty_struct
corresponding to
.IR fd .
This operation was removed in Linux 2.5.67.
.\"     commit b3506a09d15dc5aee6d4bb88d759b157016e1864
.\"     Author: Andries E. Brouwer <andries.brouwer@cwi.nl>
.\"     Date:   Tue Apr 1 04:42:46 2003 -0800
.\"
.\"     [PATCH] kill TIOCTTYGSTRUCT
.\"
.\"     Only used for (dubious) debugging purposes, and exposes
.\"     internal kernel state.
.\"
.\" .SS Serial info
.\" .BR "#include <linux/serial.h>"
.\" .P
.\" .TP
.\" .BI "TIOCGSERIAL	struct serial_struct *" argp
.\" Get serial info.
.\" .TP
.\" .BI "TIOCSSERIAL	const struct serial_struct *" argp
.\" Set serial info.
.SH RETURN VALUE
On success,
0 is returned.
On error,
\-1 is returned, and
.I errno
is set to indicate the error.
.SH EXAMPLES
Check the condition of DTR on the serial port.
.P
.\" SRC BEGIN (tiocmget.c)
.EX
#include <fcntl.h>
#include <stdio.h>
#include <sys/ioctl.h>
#include <unistd.h>
\&
int
main(void)
{
    int fd, serial;
\&
    fd = open("/dev/ttyS0", O_RDONLY);
    ioctl(fd, TIOCMGET, &serial);
    if (serial & TIOCM_DTR)
        puts("TIOCM_DTR is set");
    else
        puts("TIOCM_DTR is not set");
    close(fd);
}
.EE
.\" SRC END
.SH SEE ALSO
.BR ioctl (2),
.BR TCGETS (2const),
.BR TCSETS (2const),
.BR TCSETSW (2const),
.BR TCSETSF (2const),
.BR TCGETS (2const),
.BR TCSETS (2const),
.BR TCSETSW (2const),
.BR TCSETSF (2const),
.BR TCGETS (2const),
.BR TCSETS (2const),
.BR TCSETSW (2const),
.BR TCSETSF (2const),
.BR TIOCGLCKTRMIOS (2const),
.BR TIOCSLCKTRMIOS (2const),
.BR TIOCGWINSZ (2const),
.BR TIOCSWINSZ (2const),
.BR TCSBRK (2const),
.BR TCSBRKP (2const),
.BR TIOCSBRK (2const),
.BR TIOCCBRK (2const),
.BR TCXONC (2const),
.BR FIONREAD (2const),
.BR TIOCINQ (2const),
.BR TIOCOUTQ (2const),
.BR TCFLSH (2const),
.BR TIOCSERGETLSR (2const),
.BR TIOCSTI (2const),
.BR TIOCCONS (2const),
.BR TIOCSCTTY (2const),
.BR TIOCNOTTY (2const),
.BR TIOCGPGRP (2const),
.BR TIOCSPGRP (2const),
.BR TIOCGSID (2const),
.BR TIOCEXCL (2const),
.BR TIOCGEXCL (2const),
.BR TIOCNXCL (2const),
.BR TIOCPKT (2const),
.BR TIOCGPKT (2const),
.BR TIOCSPTLCK (2const),
.BR TIOCGPTLCK (2const),
.BR TIOCGPTPEER (2const),
.BR ldattach (8),
.BR ioctl_console (2),
.BR termios (3),
.BR pty (7)
.\"
.\" FIONBIO			const int *
.\" FIONCLEX			void
.\" FIOCLEX			void
.\" FIOASYNC			const int *
.\" from serial.c:
.\" TIOCSERCONFIG		void
.\" TIOCSERGWILD		int *
.\" TIOCSERSWILD		const int *
.\" TIOCSERGSTRUCT		struct async_struct *
.\" TIOCSERGETMULTI		struct serial_multiport_struct *
.\" TIOCSERSETMULTI		const struct serial_multiport_struct *
.\" TIOCGSERIAL, TIOCSSERIAL (see above)
